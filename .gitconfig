[user]
	name = "Patrick D'appollonio"
	email = patrick@dappollonio.us
[alias]
	aa = add -A
	co = checkout
	cb = checkout -b
	st = status -s
	cl = clone
	cm = commit -m
	cma = commit -a -m
	ca = commit --amend -m
	amend = commit --amend -m
	diff = diff --word-diff
	br = branch
	bd = branch -d
	bdf = branch -D
	bc = checkout -b
	bdr = "!f() { git push \"$1\" --delete \"$2\"; }; f"
	rmtag = "!f() { git tag -d $1 && git push origin :refs/tags/$1; }; f"
	rmrtag = "!f() { git push origin :refs/tags/$1; }; f"
	ctag = "!f() { git tag -a $1 -m \"${2:-$1}\" && git push --tags; }; f"
	rctag = "!f() { git rmtag $1 && git ctag $1; }; f"
	ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
	lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
	le = log --oneline --decorate
	dl = "!git ll -1"
	aliases = "!git config -l | grep alias | cut -c 7-"
	track = "!f() { git branch --set-upstream-to=\"${1:-origin}\"/\"$(git rev-parse --abbrev-ref HEAD)\"; }; f"
	pom = push origin master
	change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "
	remove-file = "!f() { git filter-branch -f --index-filter \"git rm --cached --ignore-unmatch $1\" --prune-empty --tag-name-filter cat -- --all; }; f"
	git = !exec git
	squash-all = "!f(){ git reset $(git commit-tree HEAD^{tree} -m \"${1:-A new start}\");};f"
	empty = "!f(){ git commit -m \"${1:-Empty commit}\" --allow-empty; };f"
	conflicts = diff --name-only --diff-filter=U

[push]
	default = current
[github]
	user = patrickdappollonio
[core]
	excludesfile = ~/.dotfiles/.global-gitignore
	pager = less -R
	ignorecase = false
[merge]
	renamelimit = 15000
	tool = vimdiff
	conflictstyle = diff3
[color]
	ui = true
[credential]
	helper = cache --timeout 7200
[mergetool "diffconflicts"]
	cmd = diffconflicts vim $BASE $LOCAL $REMOTE $MERGED
	trustExitCode = true
[mergetool]
	keepBackup = false
	prompt = false
